安全程式碼範例：
Android： 
	假設你有由知名CA頒發的證書的Web伺服器，你可以用簡易程式碼安全要求：
	URL url = new URL ( "https://wikipedia.org" ); 
	URLConnection urlConnection = url . openConnection (); 
	InputStream in = urlConnection . getInputStream (); 
	copyInputStreamToOutputStream ( in , System . out ); 
	如果你想客製設定HTTP請求，可以改使用HttpsURLConnection或是強制轉型為HttpURLConnection
public class KeyPinStore {

    private static KeyPinStore instance = null;
    private SSLContext sslContext = SSLContext.getInstance("TLS");

    public static synchronized KeyPinStore getInstance() throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException{
        if (instance == null){
            instance = new KeyPinStore();
        }
        return instance;
    }

    private KeyPinStore() throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException{
        // Load CAs from an InputStream
        // (could be from a resource or ByteArrayInputStream or ...)
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        // randomCA.crt should be in the Assets directory
        InputStream caInput = new BufferedInputStream(MainActivity.context.getAssets().open("randomCA.crt"));
        Certificate ca;
        try {
            ca = cf.generateCertificate(caInput);
            System.out.println("ca=" + ((X509Certificate) ca).getSubjectDN());
        } finally {
            caInput.close();
        }

        // Create a KeyStore containing our trusted CAs
        String keyStoreType = KeyStore.getDefaultType();
        KeyStore keyStore = KeyStore.getInstance(keyStoreType);
        keyStore.load(null, null);
        keyStore.setCertificateEntry("ca", ca);

        // Create a TrustManager that trusts the CAs in our KeyStore
        String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);
        tmf.init(keyStore);

        // Create an SSLContext that uses our TrustManager
        // SSLContext context = SSLContext.getInstance("TLS");
        sslContext.init(null, tmf.getTrustManagers(), null);
    }

    public SSLContext getContext(){
        return sslContext;
    }
}

iOS： 
完整的SSL Pinning範例(以https://www.owasp.org 與 https://gca.nat.gov.tw)
準備：取出SSL網站的公鑰
1.由網站獲取公鑰，以利 https ssl ceriticate 認證時比對
  ex +'/BEGIN CERTIFICATE/,/END CERTIFICATE/p' <(echo | openssl s_client -showcerts -connect www.owasp.org:443) -scq > file.crt
  ex +'/BEGIN CERTIFICATE/,/END CERTIFICATE/p' <(echo | openssl s_client -showcerts -connect gca.nat.gov.tw:443) -scq > gca.crt
 2.然後轉成 der
  openssl x509 -outform der -in owasp.crt -out owasp2.der
  openssl x509 -outform der -in gca.crt -out gca2.der
3.附加為專案內容，以用於比對
範例一：元件NSURLConnectionDelegate
1.實作NSURLConnectionDelegate
2.建立NSURLConnection
   urlconnection = [[NSURLConnection alloc] initWithRequest:theRequest delegate:self];
3.監聽、驗證SSL Pinning
- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {
return [protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust];
}
//可在 didReceiveAuthenticationChallenge 進行憑證驗證
//或者實作 willSendRequestForAuthenticationChallenge自行更早決定成功/失敗/驗證等
//於willSendRequestForAuthenticationChallenge 可回傳以下幾種方式
// 1.useCredential:forAuthenticationChallenge:
// 2.continueWithoutCredentialForAuthenticationChallenge:
// 3.cancelAuthenticationChallenge:
// 4.performDefaultHandlingForAuthenticationChallenge:
// 5.rejectProtectionSpaceAndContinueWithChallenge:
- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge {
   //Enable Pinning
   if ([[[challenge protectionSpace] authenticationMethod] isEqualToString: NSURLAuthenticationMethodServerTrust]){
       do
       {
           SecTrustRef serverTrust = [[challenge protectionSpace] serverTrust];
           if(nil == serverTrust)
           {
               [self AppendLog:@"serverTrust is nil"];
               break; /* failed */
           }
           OSStatus status = SecTrustEvaluate(serverTrust, NULL);
           if(!(errSecSuccess == status))
           {
               [self AppendLog:@"SecTrustEvaluate status is errSecSuccess"];
               break; /* failed */
           }
           SecCertificateRef serverCertificate = SecTrustGetCertificateAtIndex(serverTrust, 0);
           if(nil == serverCertificate)
           {
               [self AppendLog:@"serverCertificate is nil"];
               break; /* failed */
           }
           CFDataRef serverCertificateData = SecCertificateCopyData(serverCertificate);
           if(nil == serverCertificateData)
           {
               [self AppendLog:@"serverCertificateData is nil"];
               break; /* failed */
           }
           const UInt8* const data = CFDataGetBytePtr(serverCertificateData);
           const CFIndex size = CFDataGetLength(serverCertificateData);
           NSData* cert1 = [NSData dataWithBytes:data length:(NSUInteger)size];
           if(nil == cert1)
           {
               [self AppendLog:@"server cert is nil"];
               break; /* failed */
           }
           NSString *file = [[NSBundle mainBundle] pathForResource:@"domain" ofType:@"der"];
           NSData* cert2 = [NSData dataWithContentsOfFile:file];
           if(nil == cert1 || nil == cert2)
           {
               [self AppendLog:@"local pinning cert is nil"];
               break; /* failed */
           }
           const BOOL equal = [cert1 isEqualToData:cert2];
           if(!equal){
               [self AppendLog:@"certs not equal"];
               break; /* failed */
           }
           [self AppendLog:@"certs are GOOD"];
           // The only good exit point
           return [[challenge sender] useCredential: [NSURLCredential credentialForTrust: serverTrust]
                                    forAuthenticationChallenge: challenge];
           
       } while(0);
	 }
	   // Bad dog
	   return [[challenge sender] cancelAuthenticationChallenge: challenge];
	}
	範例二：元件NSURLSession
	1.建立NSURLSession，並啟動之 by NSURLSessionDataTask
	   NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration];
	   urlsession = [NSURLSession sessionWithConfiguration:sessionConfig delegate:self delegateQueue:nil];
	   [[urlsession dataTaskWithURL:url completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
	       // response management code
	       if (error)
	       {
	           [self AppendLog:[NSString stringWithFormat:@">> dataTask Error:%@", error.description]];
	       }
	       else
	       {
	           [self AppendLog:[NSString stringWithFormat:@">> dataTask got data %lu", data.length]];
	       }
	   }] resume];
	2.驗證SSL Pinning
	-(void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler {
	   // Get remote certificate
	   SecTrustRef serverTrust = challenge.protectionSpace.serverTrust;
	   SecCertificateRef certificate = SecTrustGetCertificateAtIndex(serverTrust, 0);
	   // Set SSL policies for domain name check
	   NSMutableArray *policies = [NSMutableArray array];
	   [policies addObject:(__bridge_transfer id)SecPolicyCreateSSL(true, (__bridge CFStringRef)challenge.protectionSpace.host)];
	   SecTrustSetPolicies(serverTrust, (__bridge CFArrayRef)policies);
	   // Evaluate server certificate
	   SecTrustResultType result;
	   SecTrustEvaluate(serverTrust, &result);
	   BOOL certificateIsValid = (result == kSecTrustResultUnspecified || result == kSecTrustResultProceed);
	   // Get local and remote cert data
	   NSData *remoteCertificateData = CFBridgingRelease(SecCertificateCopyData(certificate));
	   NSString *pathToCert = [[NSBundle mainBundle]pathForResource:@"domain" ofType:@"der"];
	   NSData *localCertificate = [NSData dataWithContentsOfFile:pathToCert];
	   // The pinnning check
	   if ([remoteCertificateData isEqualToData:localCertificate] && certificateIsValid) {
	       NSURLCredential *credential = [NSURLCredential credentialForTrust:serverTrust];
	       [self AppendLog:@"URLSession pinning completionHandler credential(GOOD)"];
	       completionHandler(NSURLSessionAuthChallengeUseCredential, credential);
	   } else {
	       [self AppendLog:@"URLSession pinning completionHandler BAD(NULL)"];
	       completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, NULL);
	   }
	}
