不安全程式碼範例：
iOS： 
iOS因造成整數溢位(Object C)
 [NSString stringWithFormat:@"INT32_MAX=%d", INT32_MAX];
 [NSString stringWithFormat:@"INT32_MAX+1=%d", INT32_MAX+1];
 [NSString stringWithFormat:@"INT32_MAX+1+INT32_MAX=%d", INT32_MAX+1+INT32_MAX];
 [NSString stringWithFormat:@"INT32_MIN=%d", INT32_MIN];
 [NSString stringWithFormat:@"INT32_MIN-1=%d", INT32_MIN-1];
 [NSString stringWithFormat:@"INT32_MIN-1-INT32_MIN=%d", INT32_MIN-1-INT32_MIN];
造成整數溢位且Exception(Swift)
var potentialOverflow = Int16.max
// potentialOverflow equals 32767, which is the maximum value an Int16 can hold
potentialOverflow += 1
造成整數溢位(Swift)Overflow運算子
var unsignedOverflow = UInt8.max
// unsignedOverflow equals 255, which is the maximum value a UInt8 can hold
unsignedOverflow = unsignedOverflow &+ 1
// unsignedOverflow is now equal to 0
安全程式碼範例：
iOS： 
由於整數會有溢位問題，在加減乘的運算時，都會發生。請務必注意。除了採用安全的計算方法或限制以外。在計算記憶體空間大小時，也必須檢查是否計算出來的數字大小，是否會超過SIZE_MAX。
//calculate n*m with overflow-safe 計算記憶體空間大小
if (n > 0 && m > 0 && SIZE_MAX/n >= m) {
   size_t bytes = n * m;
   ... /* allocate “bytes” space */
}
